.. role:: underline
    :class: underline

Descripción
=========================

Recordemos inicializar GAP de la siguiente manera:

.. code-block:: gap

    ┌───────┐   GAP 4.10.2 of 19-Jun-2019
    │  GAP  │   https://www.gap-system.org
    └───────┘   Architecture: i686-pc-cygwin-default32-kv3
    Configuration:  gmp 6.1.2, readline
    Loading the library and packages ...
    Packages: AClib 1.3.1, Alnuth 3.1.1, AtlasRep 2.1.0, AutoDoc 2019.05.20, AutPGrp 1.10, Browse 1.8.8,
             CRISP 1.4.4, Cryst 4.1.19, CrystCat 1.1.9, CTblLib 1.2.2, FactInt 1.6.2, FGA 1.4.0,
             Forms 1.2.5, GAPDoc 1.6.2, genss 1.6.5, IO 4.6.0, IRREDSOL 1.4, LAGUNA 3.9.3, orb 4.8.2,
             Polenta 1.3.8, Polycyclic 2.14, PrimGrp 3.3.2, RadiRoot 2.8, recog 1.3.2, ResClasses 4.7.2,
             SmallGrp 1.3, Sophus 1.24, SpinSym 1.5.1, TomLib 1.2.8, TransGrp 2.0.4, utils 0.63
    Try '??help' for help. See also '?copyright', '?cite' and '?authors'
    gap> LoadPackage( "GBNP" );
    ─────────────────────────────────────────────────────────────────────────────────────────────────────
    Loading  GBNP 1.0.3 (Non-commutative Gröbner bases)
    by A.M. Cohen (http://www.win.tue.nl/~amc) and
    J.W. Knopper (J.W.Knopper@tue.nl).
    Homepage: http://mathdox.org/products/gbnp/
    ─────────────────────────────────────────────────────────────────────────────────────────────────────
    true
    gap>

Polinomios no conmutativos (NPs)
-------------------------------------

El tipo de datos principal del ``paquete GBNP`` es una lista de polinomios no conmutativos (NP). El tipo de datos de un polinomio no conmutativo, denominado formato ``NP``, es una lista de dos listas:

    - La primera lista es una lista ``m`` de monomios.
    - La segunda lista es una lista ``c`` de coeficientes de estos monomios.

Las dos listas tienen la misma longitud. El polinomio representado por el par ordenado ``[ m, c ]`` es

.. math::
    
    \displaystyle\sum_{i}c_im_i.

Un monomio es una lista de números enteros positivos. Se interpretan como los índices de las variables. Entonces, si ``k = [ 1,2,3,2,1 ]`` y las variables son ``x``, ``y``, ``z`` (en este orden), entonces ``k`` representa el monomio ``xyzyx``.

.. note::
    
    El nombre de las variables no tiene ningún significado. Hay varias formas de imprimirlas, pero la predeterminada es :math:`a`, :math:`b`, :math:`c`, :math:`\dots` (ver más abajo).

.. important::
    
    - El polinomio cero o nulo está representado por ``[ [ ], [ ] ]``.
    - El polinomio :math:`1` está representado por ``[ [ [ ] ], [ 1 ] ]``.

Los algoritmos funcionan para el álgebra :math:`\mathbb{F} \langle\langle x_{1}, x_{2},\dots, x_{t} \rangle\rangle` de polinomios no conmutativos en :math:`t` variables sobre el campo :math:`\mathbb{F}`. En consecuencia, la lista ``c`` debe contener elementos de :math:`\mathbb{F}`. No siempre es fácil recuperar :math:`\mathbb{F}` de la lista ``C``. Las funciones ``One`` y ``Zero`` de **GAP** pueden ser de alguna ayuda.

Para facilitar la visualización de los polinomios, proporcionamos la función ``PrintNP``. Por ejemplo

.. code-block:: gap
    :caption: función PrintNP
    :name: funcion_PrintNP

    gap> PrintNP([ [[1,2],[2,1]],[3,-1] ]);
    3ab - ba

De hecho, tenemos los nombres: :math:`a`, :math:`b`, :math:`c`, :math:`\dots` para :math:`x_1`, :math:`x_2`, :math:`x_3`, :math:`\dots`, excepto que todo lo que está más allá de ``l`` (la ``12ª`` letra) se llama :math:`x`. Esto se puede cambiar fácilmente llamando a la función ``GBNP.ConfigPrint``, que se puede encontrar en la ``Sección 3.2`` (**cambiar el número de esta sección**).

La función ``PrintNPList`` está disponible para imprimir una lista de ``NP`` (= polinomios no conmutativos).

Para facilitar la prueba de si dos estructuras de datos representan el mismo ``NP``, usamos la convención de que los polinomios son "limpios". Esto significa que parece que son una salida de la función ``CleanNP``. En otras palabras:

    - cada monomio aparece como máximo una vez en la lista de monomios,
    - no se producen monomios cuyos coeficientes sean cero,
    - Los monomios están ordenados (primero el grado total, luego lexicográficamente) de mayor a menor.

Una ventaja del ordenamiento es que el monomio principal de un ``NP``, ``p`` es solo ``p[1][1]`` y su coeficiente principal es ``p[2][1]``. Los usuarios que quieran trabajar con otros pedidos pueden utilizar las funciones definidas en la extensión ``NMO`` `[aquí] <http://www.mathdox.org/grobner/nmo/manual.pdf>`_ de ``GBNP``.

Polynomios No Conmutativos para Modulos (NPMs)
----------------------------------------------------

En la ``Sección 2.1`` se describe el formato NP para elementos de un álgebra libre :math:`A` de polinomios no conmutativos en un número fijo de variables. Este formato se puede ajustar ligeramente para permitir el uso de un módulo de derecho libre :math:`A^{n}` de rango finito :math:`n` sobre :math:`A`. El formato interno de un elemento del módulo es similar al de un polinomio no conmutativo. El único cambio es que cada monomio comenzará con un número negativo. El valor absoluto de este número es el índice del vector base estándar del módulo libre.

Por ejemplo, en el módulo libre :math:`\mathbb{F} \langle\langle x_{1}, x_{2},\dots, x_{t} \rangle\rangle` de rango :math:`3`, la expresión ``[ [ [ -1 ] ], [ 1 ] ]`` representa ``[1, 0, 0]`` y ``[ [ [-1, 1, 2 ], [ -1, 2, 1 ], [ - 3, 2, 2, 2 ] ], [ 6, -7, 9 ] ]`` representa ``[`` :math:`6x_{1}x_{2} - 7x_{2}x_{1}` ``,`` :math:`0` ``,`` :math:`9x_{2}^{3}` ``]``. El vector cero se representa de la misma manera que su contraparte en formato ``NP`` en la ``Sección 2.1`` y es el único sin una entrada negativa: ``[ [ ], [ ] ]``. Nos referimos a este formato como formato ``NPM``.

Los elementos de los módulos se imprimen como vectores. Consulte la ``Sección 3.9`` sobre cómo utilizar los módulos. También se recomiendan los ejemplos ``A.19,`` ``A.21`` y ``A.20``.

Functiones Principales
-------------------------------------

:underline:`La función principal` es ``SGrobner (3.4.2)`` (que es la abreviatura de ``Strong Gröbner``, ya que usamos la **Forma Normal Fuerte**, discutida en la ``Sección StrongNormalFormNPM (3.9.5)``, la mayor parte del tiempo). Toma una lista de ``NP`` en un álgebra libre :math:`A` y prepara dos listas para su tratamiento en un ciclo:

    - Primero la lista en sí, llamada :math:`G`. Antes de ingresar al ciclo, :math:`G` se limpia, ordena y sus elementos se hacen mónicos, es decir, se multiplican por un escalar para que el coeficiente principal se convierta en uno. El pedido se realiza mediante la comparación de los principales monomios. El orden de los principales monomios es lexicográfico de longitud. Para otros pedidos, se pueden utilizar las funciones de la extensión ``NMO``; ver ``[5]``.

    - En segundo lugar, la lista de todas las formas normales con respecto a :math:`G` de :math:`S`-polinomios de elementos de :math:`G`. Esta lista se llama :math:`D`. Para una base de Gröbner, los :math:`S`-polinomios de polinomios en :math:`D` (posiblemente con un elemento de :math:`G`) deben ser calculado. Si :math:`D` está vacío, :math:`G` es una base de Gröbner.


Luego, la función llama a la rutina ``GBNP.SGrobnerLoop`` en los argumentos ``G``, ``D`` que se cambian en un intento de modificar ``G`` conservando las siguientes dos propiedades.

    1. ``G`` genera el mismo ideal bilateral :math:`I` en :math:`A` que antes.
    2. ``D`` contiene todas las formas normales con respecto a ``G`` de :math:`S`-polinomios de elementos de ``G`` que necesitan reducirse a cero para que la base sea una **base de Gröbner**.

La importancia de esta característica es que, en caso de grandes cálculos, el usuario puede almacenar ``G`` y ``D`` en casi cualquier momento y reanudar el cálculo recargando ``G`` y ``D`` y llamando a la función de bucle ``GBNP.SGrobnerLoop`` cuando sea conveniente. El único detalle técnico que se debe manejar es que el último elemento de la lista ``G`` debe copiarse en la lista ``D``. El bucle en sí da un paso para hacer que ``G`` se parezca más a una **base de Gröbner** de :math:`I`. Como en el caso conmutativo, el progreso se puede indicar mediante el uso de un orden en el conjunto de monomios principales de los elementos de ``G``.

Sin embargo, a diferencia del caso conmutativo, este ordenamiento no está bien fundado y no hay garantía a priori de que se saldrá del bucle después de un número finito de iteraciones. El ciclo termina cuando la lista ``D`` está vacía, en cuyo caso el trabajo está esencialmente hecho: después de una limpieza interna y un poco de reescritura adicional, el cálculo termina.

En muchas de nuestras propias aplicaciones, el módulo de anillo polinomial completo, el ideal de dos lados I generado por ``G`` es un álgebra de cociente de dimensión finita. En tales casos, uno quisiera saber la dimensión (de donde la función ``DimQA (3.5.2)``, ``QA`` para álgebra de cocientes), encontrar una base (de donde la función ``BaseQA (3.5.1))``, o simplemente los monomios hasta un cierto grado que no son divisibles por un término principal de ``G`` (de ahí la función ``GBNP.NondivMons``). En realidad, mediante el uso de ``MulQA (3.5.5)``, incluso puede multiplicar elementos del álgebra del cociente. En caso de que se desconozca si el álgebra del cociente es finito o infinito, se pueden usar las funciones ``FinCheckQA (3.6.2)`` y ``DetermineGrowthQA (3.6.1)``. Cuando el álgebra del cociente es de dimensión infinita, es posible que desee determinar su serie de Hilbert parcial. Esto se puede hacer con la función ``HilbertSeriesQA (3.6.3)``.

Sobre la implementación
----------------------------------------------------

En lugar de almacenar todas las obstrucciones, el algoritmo de base de Gröbner calcula la forma normal (fuerte) de las obstrucciones a partir de ``G`` y las coloca en ``D`` siempre que no sean cero. Al comienzo del ciclo, tomamos el primer elemento de la lista ``D`` y lo preparamos para agregarlo a ``G``. Luego nos ocupamos de dos objetivos:


    1. para restaurar las propiedades invariantes,
    2. para limpiar ``G`` (es decir, reducirlo a un conjunto más breve y breve).

Esto se hace principalmente mediante cálculos adicionales de polinomio ``S`` y de forma normal.

En cuanto a la gestión de datos, hemos optado por trabajar con listas in situ, es decir, no copiar la lista sino realizar todas las operaciones en una y la misma lista. Para ello usamos operaciones como ``RemoveElmList`` y ``Add``, ver ``Referencia: Add``. La idea aquí es economizar espacio para grandes cálculos. No utilizamos operaciones in situ en todas partes, pero nos hemos concentrado en las listas potencialmente más grandes: ``G`` y ``D``.

Para comprobar si se puede reducir un monomio, se utiliza una estructura de árbol interna.